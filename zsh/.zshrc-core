# Before anything, load wal
(cat $HOME/.cache/wal/sequences &) 2>/dev/null
source $HOME/.cache/wal/colors-tty.sh 2>/dev/null

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to ZINIT installation.
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [ ! -d "$ZINIT_HOME" ]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

source "${ZINIT_HOME}/zinit.zsh"

# p10k for zinit
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Other plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab
zinit snippet OMZP::git
zinit snippet OMZP::pip
zinit snippet OMZP::sudo
zinit snippet OMZP::colored-man-pages
zinit snippet OMZP::command-not-found
zinit snippet OMZP::web-search

# Load completions
autoload -U compinit && compinit
# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# Completion coloring
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# Disable default completion menu in favor of fzf-tab
zstyle ':completion:*' menu no
# Show directory preview in fzf-tab
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

# Configure history
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# User configuration

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
if [[ $TERM == linux ]]; then
  [[ ! -f ~/.p10k-tty.zsh ]] || source ~/.p10k-tty.zsh
else
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi

# Neovim path
export PATH=/opt/nvim-linux64/bin:$PATH

# Node
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Map Ctrl + Backspace to delete the previous word
bindkey '^H' backward-kill-word

# Custom aliases
# Editor
alias ef='$EDITOR'
alias e='$EDITOR .'
alias edot='$EDITOR $HOME/dotfiles'
alias elsp='$EDITOR $HOME/dotfiles/nvim/lua/config/lsp.lua'
# File management
alias ls='eza'
alias ll='eza -l --group-directories-first --icons'
alias la='eza -a --group-directories-first --icons'
alias lal='eza -la --group-directories-first --icons'
alias lla='lal'
# Print files in order of size
alias lss='eza -l --group-directories-first --icons --sort=size'
alias lssr='eza -l --group-directories-first --icons --sort=size --reverse'
alias lssa='eza -la --group-directories-first --icons --sort=size'
alias lssar='eza -la --group-directories-first --icons --sort=size --reverse'
# Print files in order of modification time
alias lsm='eza -l --group-directories-first --icons --sort=modified --time-style=long-iso'
alias lsma='eza -la --group-directories-first --icons --sort=modified --time-style=long-iso'
alias lsmr='eza -l --group-directories-first --icons --sort=modified --reverse --time-style=long-iso'
alias lsmar='eza -la --group-directories-first --icons --sort=modified --reverse --time-style=long-iso'
# Other coreutils alternatives
alias cat="batcat"




# Use gnome keyring. Without a proper DE, you can use `secret-tool` to add passwords to the keyring.
# See https://wiki.archlinux.org/title/GNOME/Keyring
# and https://bbs.archlinux.org/viewtopic.php?pid=2217761#p2217761
# Make sure you do not run ssh-agent in your system, as it will conflict with gnome-keyring-daemon.
if ! pgrep -u "$USER" -f gnome-keyring-daemon > /dev/null; then
  eval $(gnome-keyring-daemon --start 2>/dev/null)
fi
export SSH_AUTH_SOCK

# fzf zsh integration
eval "$(fzf --zsh)"
